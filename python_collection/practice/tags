!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
PIK	pickle_example.py	/^PIK = "pickle_stuff.dat"$/;"	v
X	plot3d.py	/^X =$/;"	v
__init__	pickle_example.py	/^    def __init__(self, name):$/;"	m	class:person
a	collection_handling.py	/^a = {1:'t', 2:'y'}$/;"	v
a	iterator.py	/^a = range(10)$/;"	v
a	symbolicEquations.py	/^a = 4*2*pow(x,2) # define an equation using the symbol$/;"	v
a	sympy_example.py	/^a=sympy.Symbol('a')$/;"	v
aIter	iterator.py	/^aIter = iter(a)$/;"	v
ax	plot3d.py	/^ax = fig.add_subplot(111, projection='3d')$/;"	v
b	symbolicEquations.py	/^b = 10*x $/;"	v
b	sympy_example.py	/^b=sympy.Symbol('b')$/;"	v
c	collection_handling.py	/^c = Counter(l)$/;"	v
c	db_insert_to_table_example.py	/^    c = conn.cursor()$/;"	v
c	symbolicEquations.py	/^c = a+b$/;"	v
city	db_insert_to_table_example.py	/^city = ["ramsar", "portland", "kerman", "homeless", "world"]$/;"	v
combineList	itertools.py	/^combineList = [('a',4,5), (10,11,12)]$/;"	v
conn	db_insert_to_table_example.py	/^    conn = sqlite3.connect(dbAddress)$/;"	v
dbAddress	db_insert_to_table_example.py	/^dbAddress = "example.db"$/;"	v
deltaOperand1	collection_handling.py	/^deltaOperand1 = [7,8,9]$/;"	v
dictionary	collection_handling.py	/^dictionary = dict(zip(keys, values))$/;"	v
doNothing	deap_example.py	/^def doNothing(individual):$/;"	f
e	sympy_example.py	/^e = foo(a,b)$/;"	v
e	sympy_example2.py	/^e = foo(*y)$/;"	v
eaMuPlusLambda_redefined	deap_example.py	/^def eaMuPlusLambda_redefined(population, toolbox, MU, LAMBDA, CXPB, MUTPB, NGEN):$/;"	f
evalOneMax	GA_example.py	/^def evalOneMax(individual):$/;"	f
evalOneMax	GA_practice.py	/^def evalOneMax(individual):$/;"	f
evalOneMax	deap_example.py	/^def evalOneMax(individual):$/;"	f
fig	plot3d.py	/^fig = plt.figure()$/;"	v
foo	itertools.py	/^def foo(x,y):$/;"	f
foo	map.py	/^def foo(x,y):$/;"	f
foo	sympy_example.py	/^def foo(a,b):$/;"	f
foo	sympy_example2.py	/^def foo(a,b):$/;"	f
foo1	func_scope.py	/^def foo1(x):$/;"	f
foo2	func_scope.py	/^    def foo2():$/;"	f	function:foo1
getFriends	pickle_example.py	/^    def getFriends(self):$/;"	m	class:person
inputs	parallel.py	/^inputs = range(100)  $/;"	v
keys	collection_handling.py	/^keys = ['a', 'b', 'c']$/;"	v
l	collection_handling.py	/^l = [(1,2), (3,4) , (1,2), (4,5)]$/;"	v
l1	collection_handling.py	/^l1 = [1,4,5]$/;"	v
l2	collection_handling.py	/^l2 = [10,40, 50]$/;"	v
l3	collection_handling.py	/^l3 = zip(l1,l2)$/;"	v
l4	collection_handling.py	/^l4 = map(list, l4)$/;"	v
l4	collection_handling.py	/^l4 = zip(*l3)$/;"	v
lOfOperators	collection_handling.py	/^lOfOperators = map(lambda x : operator(*x), zip(operand1, operand2, deltaOperand1))$/;"	v
lOfPeople	pickle_example.py	/^lOfPeople = [person1, person2]$/;"	v
list1	itertools.py	/^list1 = range(0,10)$/;"	v
list2	itertools.py	/^list2 = range(110,100, -1)$/;"	v
listFiltered	itertools.py	/^listFiltered = filter(lambda i: (i[1] %3==0) , listZip)$/;"	v
listOfPeople	pickle_example.py	/^listOfPeople = [] $/;"	v
listZip	itertools.py	/^listZip = zip(list1, list2)$/;"	v
listZipReversed	itertools.py	/^listZipReversed = map(lambda i: (i[1], i[0]), listZip)$/;"	v
ltableInfo	db_insert_to_table_example.py	/^ltableInfo = zip(range(len(names)), names,city)$/;"	v
main	GA_example.py	/^def main():$/;"	f
main	GA_practice.py	/^def main():$/;"	f
main	deap_example.py	/^def main():$/;"	f
main	quality_noise_plot.py	/^def main():$/;"	f
main2d	plot.py	/^def main2d():$/;"	f
main3d	plot.py	/^def main3d():$/;"	f
myFunc1	collection_handling.py	/^def myFunc1(x):$/;"	f
myFunc2	collection_handling.py	/^def myFunc2(x,y):$/;"	f
myGenerator	generator.py	/^def myGenerator():$/;"	f
mygen	generator.py	/^mygen = myGenerator() #required to assign the function to a name$/;"	v
names	db_insert_to_table_example.py	/^names = ["behzad", "molly", "amir", "khoda", "others"]$/;"	v
newSorted	itertools.py	/^newSorted = sorted(listZip, key=itemgetter(1))$/;"	v
newSorted	itertools.py	/^newSorted = sorted(listZip, key=lambda i: i[1])$/;"	v
num_cores	parallel.py	/^num_cores = multiprocessing.cpu_count()$/;"	v
operand1	collection_handling.py	/^operand1 = [1,2,3]$/;"	v
operand2	collection_handling.py	/^operand2 = [10,20,30]$/;"	v
operator	collection_handling.py	/^operator = namedtuple("operator", ["operand1", "operand2", "deltaOperand1"])$/;"	v
operator1	collection_handling.py	/^operator1 = operator(1,4,2)$/;"	v
permutedTuples	itertools.py	/^permutedTuples= list(itertools.product(*combineList))$/;"	v
person	pickle_example.py	/^class person:$/;"	c
person1	pickle_example.py	/^person1 = person("behzad")$/;"	v
person2	pickle_example.py	/^person2 = person("molly")$/;"	v
processInput	parallel.py	/^def processInput(i):  $/;"	f
result	collection_handling.py	/^result = map(lambda x: myFunc2(*x), resultsPermuted)$/;"	v
result	collection_handling.py	/^result = map(lambda x: myFunc2(*x), zip(range(4), range(3,7)))$/;"	v
results	parallel.py	/^results = Parallel(n_jobs=num_cores)(delayed(processInput)(i) for i in inputs)  $/;"	v
resultsPermuted	collection_handling.py	/^resultsPermuted = list(itertools.product(range(4), range(7,11)))$/;"	v
return_conf	deap_example.py	/^def return_conf(config):$/;"	f
rev	plot.py	/^def rev(x):$/;"	f
rev	quality_noise_plot.py	/^def rev(x):$/;"	f
setAge	pickle_example.py	/^    def setAge(self, age):$/;"	m	class:person
setFriends	pickle_example.py	/^    def setFriends(self, *friendList):$/;"	m	class:person
setName	pickle_example.py	/^    def setName(self, name):$/;"	m	class:person
sourceFileParse	parsing_a_file.py	/^def sourceFileParse(sourceFileName, lAllOpsInSrcFile):$/;"	f
specializedEval	deap_example.py	/^def specializedEval(individual):$/;"	f
specializedMutate	deap_example.py	/^def specializedMutate(individual):$/;"	f
testMain	deap_example.py	/^testMain = True$/;"	v
toolbox	GA_example.py	/^toolbox = base.Toolbox()$/;"	v
toolbox	GA_practice.py	/^toolbox = base.Toolbox()$/;"	v
vMyFunc1	collection_handling.py	/^vMyFunc1 = np.vectorize(myFunc1)$/;"	v
vMyFunc2	collection_handling.py	/^vMyFunc2 = np.vectorize(myFunc2)$/;"	v
values	collection_handling.py	/^values = [1, 2, 3]$/;"	v
x	symbolicEquations.py	/^x = symbols('x[0]') #define a symbol first$/;"	v
x	sympy_example2.py	/^x = [] $/;"	v
y	sympy_example2.py	/^y = sympy.symbols('x[0] x[1]')$/;"	v
